# Welcome to Serverless!
#
# This file is the main config file for your service.

# The name of our service
service: twilioCommunication

# Provider and language
provider:
  name: aws
  runtime: python2.7
  region: us-east-1
  # Pre-existing role is used here with the appropriate permissions already granted.
  # Alternatively, you can omit this and Serverless will create a new role with the appropriate
  # permissions.
  #role: arn:aws:iam::219104658389:role/lambda-s3-execution-role
  #------------- Uncomment this to unfurl the magic ------------
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: 'Allow'
      Action: # Gives permission to SNS topics in a specific region
        - 'sns:ListTopics'
        - 'sns:Publish'
      Resource: "arn:aws:sns:us-east-1:*:*"
  timeout: 60
  #----------- End of iamRoleStatements --------------------------

# Defining the handlers here.
functions:
  processRequest:
    description: Validates incoming requests and sends a response syncrhonously if the format of the message is in the right format or an error message giving the correct usage.
    handler: process_request.process
    environment:
      TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    events:
      - http:
          path: process_request
          method: get
          integration: lambda
          request:
            template:
              application/json: '{ "body" : "$input.params(''Body'')" , "toNumber" : "$input.params(''To'')" , "fromNumber" : "$input.params(''From'')" , "image" : "$input.params(''MediaUrl0'')" , "numMedia" : "$input.params(''NumMedia'')", "twilioSignature" : "$input.params(''X-Twilio-Signature'')" }'
          response:
            headers:
              Content-Type: "'application/xml'"
            template: "#set($inputRoot=$input.path('$'))<Response><Message><Body>$inputRoot</Body></Message></Response>"

  sendResponse:
    description: composes a response from the faceRecognitionService and sends the response back to the number from where the request originated.
    handler: send_response.process
    environment:
      TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    events:
      - sns: dispatch_response
